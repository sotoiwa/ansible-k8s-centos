- hosts: master, node
  become: yes
  tasks:
  - name: "Dockerの前提パッケージ"
    yum:
      name:
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
      state: latest
  - name: "Dockerのレポジトリ追加"
    get_url:
      url: https://download.docker.com/linux/centos/docker-ce.repo
      dest: /etc/yum.repos.d/docer-ce.repo
  # - name: "Dockerのインストール"
  #   shell: |
  #     VERSION=$(yum list docker-ce --showduplicates | sort -r | grep 17.03 | head -1 | awk '{print $2}')
  #     yum install -y --setopt=obsoletes=0 docker-ce-$VERSION docker-ce-selinux-$VERSION
  - name: "Dockerのバージョン取得"
    shell: yum list docker-ce --showduplicates | sort -r | grep 18.06 | head -1 | awk '{print $2}'
    register: docker_version
  - name: "Dockerのインストール"
    yum:
      name:
      - docker-ce-{{ docker_version.stdout }}
      state: latest
  - name: "Dockerサービスの有効化と起動"
    service:
      name: docker
      enabled: yes
      state: started
  - name: "vagrantユーザーをdockerグループに追加"
    user:
      name: vagrant
      groups : docker
  - name: "スワップを無効化する"
    shell: swapoff -a
  - name: "再起動後もスワップが無効になるようにする"
    replace:
      path: /etc/fstab
      regexp: '^(\s*[^#].* swap .*)$'
      replace: '#\1'
  - name: "Kubernetesのレポジトリ追加"
    yum_repository:
      name: kubernetes
      description: Kubernetes
      baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      enabled: yes
      gpgcheck: yes
      repo_gpgcheck: yes
      gpgkey:
      - https://packages.cloud.google.com/yum/doc/yum-key.gpg
      - https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      exclude: kube*
  - name: "SELinuxを無効化する"
    selinux:
      policy: targeted
      state: permissive
  - name: "kubeadm、kubelet、kubectlのインストール"
    yum:
      name:
      - kubelet
      - kubeadm
      - kubectl
      state: latest
      disable_excludes: kubernetes
  - name: "net.bridge.bridge-nf-call-ip6tables=1の設定"
    sysctl:
      name: net.bridge.bridge-nf-call-ip6tables
      value: 1
      sysctl_file: /etc/sysctl.d/k8s.conf
      reload: yes
  - name: "net.bridge.bridge-nf-call-iptables=1の設定"
    sysctl:
      name: net.bridge.bridge-nf-call-iptables
      value: 1
      sysctl_file: /etc/sysctl.d/k8s.conf
      reload: yes
  - name: "Kubeletサービスの有効化と起動"
    service:
      name: kubelet
      enabled: yes
      state: started
  - name: "プライベートネットワークのNICのIPアドレスを変数に格納"
    shell: ip a show eth1 | grep inet | grep -v inet6 | awk '{print $2}' | cut -f1 -d/
    register: ipaddr
  - name: "kubeletがプライベートネットワークのNICにバインドするように設定"
    replace:
      path: /etc/sysconfig/kubelet
      regexp: '^(KUBELET_EXTRA_ARGS=.*)$'
      replace: 'KUBELET_EXTRA_ARGS=--node-ip={{ ipaddr.stdout }}'
  - name: "Kubeletサービスを再起動"
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted
- hosts: master
  become: yes
  tasks:
  - name: "kubeadm initの実行"
    shell: kubeadm init --apiserver-advertise-address={{ ipaddr.stdout }} --apiserver-cert-extra-sans={{ ipaddr.stdout }} --node-name $(hostname -s) --pod-network-cidr=192.168.0.0/16
  - name: ".kubeディレクトリーを作成"
    file:
      path: /home/vagrant/.kube
      state: directory
      owner: vagrant
      group: vagrant
      mode: 0755
  - name: "admin.confをコピー"
    copy:
      src: /etc/kubernetes/admin.conf
      dest: /home/vagrant/.kube/config
      remote_src: yes
      owner: vagrant
      group: vagrant
      mode: 0644
  tasks:
  - name: "APIサーバーが起動しているのを確認"
    wait_for:
      host: "{{ groups.master[0] }}"
      port: 6443
  - name: "Calicoのインストール"
    shell: |
      export KUBECONFIG=/etc/kubernetes/admin.conf
      kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
      kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
  - name: "kubectl joinコマンドを保存する"
    shell: kubeadm token create --print-join-command
    register: kubeadm_join
- hosts: node
  become: yes
  tasks:
  - name: "APIサーバーが起動しているのを確認"
    wait_for:
      host: "{{ groups.master[0] }}"
      port: 6443
  - name: "kubeadm joinコマンドを確認"
    debug:
      var: hostvars[groups.master[0]].kubeadm_join.stdout
  - name: "kubeadm joinコマンドを実行する"
    shell: "{{ hostvars[groups.master[0]].kubeadm_join.stdout }}"